<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Happy.Weddings.Gateway.API</name>
    </assembly>
    <members>
        <member name="T:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler">
            <summary>
            Filter that checks if the User specified by the UserName exists in Assist
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler.httpClientFactory">
            <summary>
            The HTTP client factory
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler.servicesConfig">
            <summary>
            The services configuration
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler.authorizationConfig">
            <summary>
            The authorization configuration
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler.#ctor(System.Net.Http.IHttpClientFactory,Happy.Weddings.Gateway.Core.Infrastructure.ServicesConfig,Microsoft.Extensions.Logging.ILogger{Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler},Happy.Weddings.Gateway.Core.Infrastructure.AuthorizationConfig)">
            <summary>
            Initializes the insatnce of the class
            </summary>
            <param name="httpClientFactory">The HTTP client factory.</param>
            <param name="servicesConfig">The services configuration.</param>
            <param name="logger">Represents the logger</param>
            <param name="authorizationConfig">The authorization configuration.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdExistsRequirementHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdRequirement)">
            <summary>
            Check if  requirement has been handled
            </summary>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdRequirement">
            <summary>
            Represensts the requirement for user Id 
            </summary>
        </member>
        <member name="P:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdRequirement.UserIdClaim">
            <summary>
            Gets or sets the UserIdClaim
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.AuthorizationRequirements.UserIdRequirement.#ctor(System.String)">
            <summary>
            Initializes the isnstance of the class
            </summary>
            <param name="userIdClaim">Represents the claim</param>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController">
            <summary>
            Blog stories operations handled by this controller
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.storyService">
            <summary>
            The story service
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.#ctor(Happy.Weddings.Gateway.Core.Services.v1.Blog.Story.IStoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController"/> class.
            </summary>
            <param name="storyService">The story service.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.GetStories">
            <summary>
            Gets the stories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.GetStory(System.Int32)">
            <summary>
            Gets the story.
            </summary>
            <param name="storyId">The story identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.CreateStory(Happy.Weddings.Gateway.Core.DTO.Blog.CreateStoryRequest)">
            <summary>
            Creates the story.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.UpdateStory(System.Int32,Happy.Weddings.Gateway.Core.DTO.Blog.UpdateStoryRequest)">
            <summary>
            Updates the story.
            </summary>
            <param name="storyId">The story identifier.</param>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Blog.StoriesController.DeleteStory(System.Int32)">
            <summary>
            Deletes the story.
            </summary>
            <param name="storyId">The story identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController">
            <summary>
            Identity users operations handled by this controller
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.userService">
            <summary>
            The story service
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.#ctor(Happy.Weddings.Gateway.Core.Services.v1.Identity.User.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController" /> class.
            </summary>
            <param name="userService">The user service.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.GetUsers">
            <summary>
            Gets the users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.GetUser(System.Int32)">
            <summary>
            Gets the user.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.CreateUser(Happy.Weddings.Gateway.Core.DTO.Identity.CreateUserRequest)">
            <summary>
            Creates the user.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.UpdateUser(System.Int32,Happy.Weddings.Gateway.Core.DTO.Identity.UpdateUserRequest)">
            <summary>
            Updates the user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Controllers.v1.Identity.UsersController.DeleteUser(System.Int32)">
            <summary>
            Deletes the user.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.CircuitBreaker">
            <summary>
            Extension for adding circuit breakers
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.CircuitBreaker.AddCircuitBreakers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the circuit breakers.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.FluentValidation">
            <summary>
            Extension for adding fluent validators
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.FluentValidation.AddFluentAbstractValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the fluent validators.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.HealthCheck">
            <summary>
            Extension for adding health checks
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.HealthCheck.AddHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the health checks.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.JWTAuthentication">
            <summary>
            Extension for adding JWT authentication
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.JWTAuthentication.AddJWTAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates the response compression.
            </summary>
            <param name="services">The services.</param>
            <param name="HostingEnvironment">The hosting environment.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.JWTAuthentication.GetKey(System.String,System.String)">
            <summary>
            Gets the key.
            </summary>
            <param name="keyFilePath">The key file path.</param>
            <param name="certificatePath">The certificate path.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.MVCConfiguration">
            <summary>
            Extension for adding MVC related operations
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.MVCConfiguration.AddMVCConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the MVC confihuration.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.ProxyHeaders">
            <summary>
            Extension for adding reverse proxy
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.ProxyHeaders.ForwardHeaders(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Forwards the headers.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.RedisDistributedCache">
            <summary>
            Extension for adding redis distributed cache exchange
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.RedisDistributedCache.AddRedisCacheExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the redis cache exchange.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.ResponseCompression">
            <summary>
            Extension for adding response compression
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.ResponseCompression.CreateResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the response compression.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.ResponseCompression.GetMimeTypesForCompression">
            <summary>
            Gets the MIME types for compression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.ServicesInjection">
            <summary>
            Extension for adding object injection lifetime
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.ServicesInjection.AddServicesInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds the services injection.
            </summary>
            <param name="services">The services.</param>
            <param name="HostingEnvironment">The hosting environment.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Extensions.SwaggerConfiguration">
            <summary>
            Extension for adding swagger documentation
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.SwaggerConfiguration.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates the response compression.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Extensions.SwaggerConfiguration.GetSwaggerSecurityScheme">
            <summary>
            Gets the swagger security scheme.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Filters.RequestRateLimitAttribute">
            <summary>
            Applying the rate limt for the requests
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute" />
        </member>
        <member name="P:Happy.Weddings.Gateway.API.Filters.RequestRateLimitAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Happy.Weddings.Gateway.API.Filters.RequestRateLimitAttribute.Minutes">
            <summary>
            Gets or sets the minutes.
            </summary>
        </member>
        <member name="P:Happy.Weddings.Gateway.API.Filters.RequestRateLimitAttribute.Cache">
            <summary>
            Gets the cache.
            </summary>
            <value>
            The cache.
            </value>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Filters.RequestRateLimitAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            </summary>
            <param name="context"></param>
            <inheritdoc />
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Filters.SerilogPropertyFilter">
            <summary>
            Serilog filter for adding dynamic properties
            </summary>
        </member>
        <member name="F:Happy.Weddings.Gateway.API.Filters.SerilogPropertyFilter._next">
            <summary>
            The next
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Filters.SerilogPropertyFilter.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Happy.Weddings.Gateway.API.Filters.SerilogPropertyFilter" /> class.
            </summary>
            <param name="next">The next.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Filters.SerilogPropertyFilter.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Program">
            <summary>
            Program starts here
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Program.Main(System.String[])">
            <summary>
            Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates the host builder.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Happy.Weddings.Gateway.API.Startup">
            <summary>
            Base method for intilaizing the services
            </summary>
        </member>
        <member name="P:Happy.Weddings.Gateway.API.Startup.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Happy.Weddings.Gateway.API.Startup.HostingEnvironment">
            <summary>
            Gets the hosting environment.
            </summary>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Happy.Weddings.Gateway.API.Startup"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="hostingEnvironment">The hosting environment.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:Happy.Weddings.Gateway.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
    </members>
</doc>
